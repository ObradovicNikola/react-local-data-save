{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","localCountIncrease","setState","prevState","localCount","localCountDecrease","localCountReset","sessionCountIncrease","sessionCount","sessionCountDecrease","sessionCountReset","state","stringLocalCount","localStorage","getItem","stringSessionCount","sessionStorage","parseInt","isNaN","this","prevProps","setItem","className","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yPAuGeA,G,kBAlGb,aAAe,IAAD,8BACZ,+CAgCFC,mBAAqB,WACnB,EAAKC,UAAS,SAACC,GACb,MAAO,CACLC,WAAYD,EAAUC,WAAa,OApC3B,EAyCdC,mBAAqB,WACnB,EAAKH,UAAS,SAACC,GACb,MAAO,CACLC,WAAYD,EAAUC,WAAa,OA5C3B,EAiDdE,gBAAkB,WAChB,EAAKJ,SAAS,CACZE,WAAY,KAnDF,EAuDdG,qBAAuB,WACrB,EAAKL,UAAS,SAACC,GACb,MAAO,CACLK,aAAcL,EAAUK,aAAe,OA1D/B,EA+DdC,qBAAuB,WACrB,EAAKP,UAAS,SAACC,GACb,MAAO,CACLK,aAAcL,EAAUK,aAAe,OAlE/B,EAuEdE,kBAAoB,WAClB,EAAKR,SAAS,CACZM,aAAc,KAtEhB,EAAKG,MAAQ,CACXP,WAAY,EACZI,aAAc,GALJ,E,iFAUZ,IAAMI,EAAmBC,aAAaC,QAAQ,cACxCC,EAAqBC,eAAeF,QAAQ,gBAC5CV,EAAaa,SAASL,GACtBJ,EAAeS,SAASF,GAEzBG,MAAMd,IACTe,KAAKjB,SAAS,CAAEE,eAGbc,MAAMV,IACTW,KAAKjB,SAAS,CAAEM,mB,yCAIDY,EAAWjB,GACxBA,EAAUC,aAAee,KAAKR,MAAMP,YACtCS,aAAaQ,QAAQ,aAAcF,KAAKR,MAAMP,YAE5CD,EAAUK,eAAiBW,KAAKR,MAAMH,cACxCQ,eAAeK,QAAQ,eAAgBF,KAAKR,MAAMH,gB,+BAgDpD,OACE,yBAAKc,UAAU,OACb,yBAAKA,UAAU,iBACb,8CACA,uCAAaH,KAAKR,MAAMP,YACxB,4BAAQmB,QAASJ,KAAKd,oBAAtB,KACA,4BAAQkB,QAASJ,KAAKb,iBAAtB,SACA,4BAAQiB,QAASJ,KAAKlB,oBAAtB,MAEF,yBAAKqB,UAAU,mBACb,gDACA,uCAAaH,KAAKR,MAAMH,cACxB,4BAAQe,QAASJ,KAAKV,sBAAtB,KACA,4BAAQc,QAASJ,KAAKT,mBAAtB,SACA,4BAAQa,QAASJ,KAAKZ,sBAAtB,W,GA5FQiB,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ca12e373.chunk.js","sourcesContent":["import './App.css';\nimport React, { Component } from 'react'\n\n\nclass App extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      localCount: 0,\n      sessionCount: 0\n    }\n  }\n\n  componentDidMount() {\n    const stringLocalCount = localStorage.getItem('localCount')\n    const stringSessionCount = sessionStorage.getItem('sessionCount')\n    const localCount = parseInt(stringLocalCount)\n    const sessionCount = parseInt(stringSessionCount)\n\n    if (!isNaN(localCount)) {\n      this.setState({ localCount })\n    }\n\n    if (!isNaN(sessionCount)) {\n      this.setState({ sessionCount })\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.localCount !== this.state.localCount) {\n      localStorage.setItem('localCount', this.state.localCount)\n    }\n    if (prevState.sessionCount !== this.state.sessionCount) {\n      sessionStorage.setItem('sessionCount', this.state.sessionCount)\n    }\n  }\n\n  localCountIncrease = () => {\n    this.setState((prevState) => {\n      return {\n        localCount: prevState.localCount + 1\n      }\n    })\n  }\n\n  localCountDecrease = () => {\n    this.setState((prevState) => {\n      return {\n        localCount: prevState.localCount - 1\n      }\n    })\n  }\n\n  localCountReset = () => {\n    this.setState({\n      localCount: 0\n    })\n  }\n\n  sessionCountIncrease = () => {\n    this.setState((prevState) => {\n      return {\n        sessionCount: prevState.sessionCount + 1\n      }\n    })\n  }\n\n  sessionCountDecrease = () => {\n    this.setState((prevState) => {\n      return {\n        sessionCount: prevState.sessionCount - 1\n      }\n    })\n  }\n\n  sessionCountReset = () => {\n    this.setState({\n      sessionCount: 0\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\" >\n        <div className=\"local storage\">\n          <h1>Local storage:</h1>\n          <p>Counter: {this.state.localCount}</p>\n          <button onClick={this.localCountDecrease}>-</button>\n          <button onClick={this.localCountReset}>reset</button>\n          <button onClick={this.localCountIncrease}>+</button>\n        </div>\n        <div className=\"session storage\">\n          <h1>Session storage:</h1>\n          <p>Counter: {this.state.sessionCount}</p>\n          <button onClick={this.sessionCountDecrease}>-</button>\n          <button onClick={this.sessionCountReset}>reset</button>\n          <button onClick={this.sessionCountIncrease}>+</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}